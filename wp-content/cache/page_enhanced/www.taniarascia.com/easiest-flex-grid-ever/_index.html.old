<!DOCTYPE html>
<html lang="en">

<head><link rel="stylesheet" type="text/css" href="http://www.taniarascia.com/wp-content/cache/minify/000000/M9DPT8pJLEnVTy4u1i8uqcxJ1cvNzAMA.css" media="all" />

	<meta charset="utf-8">
	<meta http-equiv="x-ua-compatible" content="ie=edge">
	<meta name="author" content="Tania Rascia">
	<meta name="description" content=" &raquo; Easiest Flex Grid Ever - Tutorials by Tania Rascia ">
	<meta name="viewport" content="width=device-width, initial-scale=1">


		<title>Easiest Flex Grid Ever &#8211; Tania Rascia</title>
<link rel="alternate" type="application/rss+xml" title="Tania Rascia &raquo; Easiest Flex Grid Ever Comments Feed" href="http://www.taniarascia.com/easiest-flex-grid-ever/feed/" />

<link rel='stylesheet' id='OpenSans-css'  href='//fonts.googleapis.com/css?family=Open+Sans%3A400%2C600%2C700%2C800&#038;ver=4.4.1' type='text/css' media='all' />
<link rel='stylesheet' id='NotoSerif-css'  href='//fonts.googleapis.com/css?family=Noto+Serif%3A400%2C700&#038;ver=4.4.1' type='text/css' media='all' />
<link rel='stylesheet' id='RobotoMono-css'  href='//fonts.googleapis.com/css?family=Roboto+Mono%3A400%2C300%2C500%2C700&#038;ver=4.4.1' type='text/css' media='all' />
<link rel='https://api.w.org/' href='http://www.taniarascia.com/wp-json/' />
<link rel='prev' title='Responsive Dropdown Navigation Bar' href='http://www.taniarascia.com/responsive-dropdown-navigation-bar/' />
<link rel='next' title='Setting Up a Local Server Environment' href='http://www.taniarascia.com/local-environment/' />
<meta name="generator" content="WordPress 4.4.1" />
<link rel="canonical" href="http://www.taniarascia.com/easiest-flex-grid-ever/" />
<link rel='shortlink' href='http://www.taniarascia.com/?p=320' />
<link rel="alternate" type="application/json+oembed" href="http://www.taniarascia.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.taniarascia.com%2Feasiest-flex-grid-ever%2F" />
<link rel="alternate" type="text/xml+oembed" href="http://www.taniarascia.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.taniarascia.com%2Feasiest-flex-grid-ever%2F&#038;format=xml" />

		<script>
			(function(i, s, o, g, r, a, m) {
				i['GoogleAnalyticsObject'] = r;
				i[r] = i[r] || function() {
					(i[r].q = i[r].q || []).push(arguments)
				}, i[r].l = 1 * new Date();
				a = s.createElement(o),
					m = s.getElementsByTagName(o)[0];
				a.async = 1;
				a.src = g;
				m.parentNode.insertBefore(a, m)
			})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

			ga('create', 'UA-42068444-1', 'auto');
			ga('send', 'pageview');

		</script>

</head>

<body>
	<header>
		<div class="flex vertical">
			<div class="box one-fourth">
				<a href="http://www.taniarascia.com"><img src="http://www.taniarascia.com/wp-content/themes/oblate/images/tr.png" class="logo-image" alt="Tania Rascia"></a>
			</div>
			<div class="box three-fourths social">
				<a href="https://taniarascia.github.io/new-moon"><img src="http://www.taniarascia.com/wp-content/themes/oblate/images/newmoon.png" class="darken" alt="New Moon Syntax Theme"></a>&nbsp;
				<a href="https://twitter.com/taniarascia"><img src="http://www.taniarascia.com/wp-content/themes/oblate/images/twitter.png" class="darken" alt="Twitter"></a>&nbsp;
				<a href="https://github.com/taniarascia"><img src="http://www.taniarascia.com/wp-content/themes/oblate/images/github-dark.png" class="darken" alt="GitHub"></a>&nbsp;
				<a href="http://www.taniarascia.com/feed"><img src="http://www.taniarascia.com/wp-content/themes/oblate/images/rss.png" class="darken" alt="RSS Feed"></a>
			</div>
		</div>
	</header>
	<main>
		<article id="post-320" class="single-article">
	<div class="article-header center">
				<img src="http://www.taniarascia.com/wp-content/uploads/flex-150x150.png" class="article-image" alt="Easiest Flex Grid Ever">		<h2>Easiest Flex Grid Ever</h2>
		<time datetime="2015-10-07">
			October 7, 2015		</time>
		&nbsp;‚òç&nbsp;<span class="tags"><a href="http://www.taniarascia.com/tag/css/" rel="tag">css</a>, <a href="http://www.taniarascia.com/tag/flex/" rel="tag">flex</a>	</div>
	<p>The Flexbox layout module is good news for web developers everywhere. <a href="http://caniuse.com/#feat=flexbox">The part where all major browsers now support it</a> is even better news. A lot of fantastic resources, documentation and tutorials have sprung up lately. <a href="https://philipwalton.github.io/solved-by-flexbox/">Solved by Flexbox</a> is one of my favorites. </p>
<p>In the past I used very simple CSS float grids for website templating, but Flexbox is even better, and much simpler. In this quick tutorial, I will show you how to create an extremely simple, infinitely scalable responsive grid.</p>
<h3>The Demo</h3>
<p data-height="268" data-theme-id="0" data-slug-hash="rOLEGe" data-default-tab="result" data-user="taniarascia" class='codepen'>See the Pen <a href='http://codepen.io/taniarascia/pen/rOLEGe/'>Easiest Flex Grid Ever</a> by Tania (<a href='http://codepen.io/taniarascia'>@taniarascia</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></p>
<p>We have semantic options for naming the tags and classes, but I&#8217;ll start off with a simple row and column based naming structure, in the vein of <a href="http://getbootstrap.com/css/#grid">Bootstrap</a>, <a href="http://foundation.zurb.com/docs/components/grid.html">Foundation</a>, <a href="http://getskeleton.com">Skeleton</a>, and just about every other CSS framework.</p>
<blockquote><p>Note that I&#8217;m only writing about the functional code. For the examples, I&#8217;ve added borders and background colors to the grid to make it easier to understand.</p></blockquote>
<h3>The CSS</h3>
<p>With only two classes &#8211; <code>.row</code> and <code>.column</code> &#8211; we can create an infinite, equally spaced grid. </p>
<pre><code class="language-css">.row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

.column {
  flex-basis: 100%;
}

@media screen and (min-width: 800px) {
  .column {
    flex: 1;
  }
}</code></pre>
<p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Guide to Flexbox</a> by Chris Coyier explains Flexbox in detail. For this grid, we only use a few flex properties.</p>
<p><code>display: flex</code> defines a flex container.<br />
<code>flex-direction: row</code> determines the direction of each child in a flex container as left-to-right.<br />
<code>flex-wrap: wrap</code> will allow a multi-line flex.<br />
<code>flex-basis: 100%</code> specifies the initial main size of a flex item (100%).</p>
<p>I have my mobile breakpoint set to 800px. This grid can become more complicated and have more breakpoints, but I like to have just one for mobile/tablet (small screens) and one for desktop/laptop (large screens). Using <code>min-width</code> media queries is optimal for mobile first layout design. </p>
<p>The way this is set up, each column will have 100% width on mobile, and wrap down to the next column. On desktop, all the colums will be contained to a single line.</p>
<h3>The HTML</h3>
<p>In a framework like Bootstrap, the grid is based on 12 columns. A 50% width column would be written something like <code>col-md-6</code>. This is much simpler.</p>
<p>First, create a row.</p>
<pre><code class="language-html">&lt;div class="row"&gt;
&lt;/div&gt;</code></pre>
<p>Inside that row, insert a column.</p>
<pre><code class="language-html">&lt;div class="row"&gt;
  &lt;div class="column"&gt;
  &lt;!-- 100% width --&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>This will give you one 100% wide column. Add another column.</p>
<pre><code class="language-html">&lt;div class="row"&gt;
  &lt;div class="column"&gt;
  &lt;!-- 50% width --&gt;
  &lt;/div&gt;
  &lt;div class="column"&gt;
  &lt;!-- 50% width --&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>The width of each column is 100% divided by the number of columns within the flex container (<code>.row</code>). Predictably, adding another with divide once again.</p>
<pre><code class="language-html">&lt;div class="row"&gt;
  &lt;div class="column"&gt;
  &lt;!-- 33.33% width --&gt;
  &lt;/div&gt;
  &lt;div class="column"&gt;
  &lt;!-- 33.33% width --&gt;
  &lt;/div&gt;
  &lt;div class="column"&gt;
  &lt;!-- 33.33% width --&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>So far, we have equally dividing columns.</p>
<h4>Large Screen View</h4>
<p><img src="http://www.taniarascia.com/wp-content/uploads/Screen-Shot-2015-10-07-at-4.54.32-PM.png"></p>
<h4>Small Screen View</h4>
<p><img src="http://www.taniarascia.com/wp-content/uploads/Screen-Shot-2015-10-07-at-5.21.22-PM.png"></p>
<p>Also, the grid is infinitely nestable.</p>
<p><img src="http://www.taniarascia.com/wp-content/uploads/Screen-Shot-2015-10-07-at-5.40.58-PM.png"></p>
<p>But that&#8217;s only so useful. What if you want a <a href="http://alistapart.com/article/holygrail">Holy Grail</a> layout? Or a main content with a sidebar?</p>
<p>Well, on the small screen view, it&#8217;s still going to look the same &#8211; you still want each section to be full width. On desktop, it will be slightly different. Going with the Holy Grail example, say I want a main left sidebar that&#8217;s 25% width, an advertisement sidebar on the right that&#8217;s 20% width, and the 55% as the main content?</p>
<p>The class names can be anything, but I&#8217;m just going to name them after the percents for simplicity.</p>
<pre><code class="language-html">&lt;div class="row"&gt;
  &lt;div class="column _25"&gt;
    25% Left Sidebar
  &lt;/div&gt;
  &lt;div class="column _55"&gt;
    55% Main Content
  &lt;/div&gt;
  &lt;div class="column _20"&gt;
    20% Right Sidebar
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>The only thing that needs to be added is the <code>flex</code> property inside of your <code>min-width</code> media query.</p>
<pre><code class="language-css">@media screen and (min-width: 800px) {
  ._25 {
    flex: 2.5;
  }
  ._55 {
    flex: 5.5;
  }
  ._20 {
    flex: 2;
  }
}</code></pre>
<h4>Large Screen View</h4>
<p><img src="http://www.taniarascia.com/wp-content/uploads/Screen-Shot-2015-10-07-at-5.32.04-PM.png"></p>
<h4>Small Screen View</h4>
<p><img src="http://www.taniarascia.com/wp-content/uploads/Screen-Shot-2015-10-07-at-5.32.17-PM.png"></p>
<p>Finally, you&#8217;re going to want to wrap the entire grid inside of a container so your content doesn&#8217;t stretch to 3000 pixels wide on an iMac.</p>
<pre><code class="language-html">&lt;div class="container"&gt;
  &lt;!-- rows and columns --&gt;
&lt;/div&gt;</code></pre>
<pre><code class="language-css">.container {
  max-width: 1200px;
  margin: 0 auto;
}</code></pre>
<h3>Semantics</h3>
<p>Everybody loves HTML5 semantics. Why stick with divs upon divs when we have some semantically named classes we can use instead? Rows and columns are <em>great</em> for quick template design, but once it comes down to the final code, you want something cleaner. <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">Read all about HTML5 semantic tags</a> if you&#8217;re not overly familiar.</p>
<h4>HTML</h4>
<pre><code class="language-html">&lt;main&gt;
  &lt;section&gt;
    &lt;article&gt;
      Article
    &lt;/article&gt;
    &lt;aside&gt;
      Aside
    &lt;/aside&gt;
  &lt;/section&gt;
&lt;/main&gt;</code></pre>
<p><code>main</code> is the <code>.container</code> div. The <code>main</code> tag is only meant to be used once in a document. <code>section</code> has replaced the <code>.row</code>. <code>article</code> and <code>aside</code> are two different <code>.column</code> classes. </p>
<h4>CSS</h4>
<pre><code class="language-css">main {
  max-width: 1200px;
  margin: 0 auto;
}
section {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}
article,
aside {
  flex-basis: 100%;
}
@media screen and (min-width: 800px) {
  aside {
    flex: 2.5;
  }
  article {
    flex: 7.5;
  }
}</code></pre>
<p><img src="http://www.taniarascia.com/wp-content/uploads/Screen-Shot-2015-10-07-at-5.53.02-PM.png"></p>
<p>And now you have a perfectly functional, semantic layout based on Flexbox!</p>
		<div class="alert">
			<a href="http://twitter.com/intent/tweet?text=Easiest Flex Grid Ever&url=http://www.taniarascia.com/easiest-flex-grid-ever/&via=taniarascia" target="_blank" title="Share to Twitter" class="block"><img src="http://www.taniarascia.com/wp-content/themes/oblate/images/twitter.png" class="block-i" alt="Share this article"> Share this article!</a>
		</div>
</article>
	<div id="comments" class="comments-area">

					<h3 class="comments-title">
			2 comments on &ldquo;Easiest Flex Grid Ever&rdquo;		</h3>
			<ul class="comment-list">
						<li class="comment even thread-even depth-1 parent" id="comment-276">
				<div id="div-comment-276" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tobe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.taniarascia.com/easiest-flex-grid-ever/#comment-276">
			January 6, 2016 at 10:15 am</a>		</div>

		<p>Hi Tania,</p>
<p>wanted to ask what you think about this blog post:<br />
<a href="https://jakearchibald.com/2014/dont-use-flexbox-for-page-layout/" rel="nofollow">https://jakearchibald.com/2014/dont-use-flexbox-for-page-layout/</a></p>
<p>Do you use flexbox for overall page layout on your current projects?</p>
<p>Kind Regards<br />
Tobe</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='http://www.taniarascia.com/easiest-flex-grid-ever/?replytocom=276#respond' onclick='return addComment.moveForm( "div-comment-276", "276", "respond", "320" )' aria-label='Reply to Tobe'>Reply</a></div>
				</div>
		<ul class="children">
		<li class="comment byuser comment-author-hi-tania bypostauthor odd alt depth-2" id="comment-277">
				<div id="div-comment-277" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.taniarascia.com' rel='external nofollow' class='url'>Tania</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.taniarascia.com/easiest-flex-grid-ever/#comment-277">
			January 6, 2016 at 1:29 pm</a>		</div>

		<p>Hi Tobe,</p>
<p>I currently use Flexbox. It has very good support in all modern browsers, so it really depends on if you&#8217;re working for a company that needs to have legacy IE support. <a href="http://caniuse.com/#search=flex" rel="nofollow">Here are the browser support specs</a>. I also have a version of the same grid in floats, so it&#8217;s not an issue if I need to use that instead. However, I do use Flexbox for layout, and haven&#8217;t had any of the issues described in that blog post.</p>
<p>This website, for example, doesn&#8217;t require any grid, but I am using flex for the header. <a href="http://caniuse.com/#search=grid" rel="nofollow">The grid layout</a> is only available in IE/Edge, so that one will have to wait.</p>
<p>Hope that helps!</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='http://www.taniarascia.com/easiest-flex-grid-ever/?replytocom=277#respond' onclick='return addComment.moveForm( "div-comment-277", "277", "respond", "320" )' aria-label='Reply to Tania'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
			</ul>
			<!-- .comment-list -->

			
				
										<div id="respond" class="comment-respond">
			<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/easiest-flex-grid-ever/#respond" style="display:none;">Cancel reply</a></small></h3>				<form action="http://www.taniarascia.com/wp-comments-post.php" method="post" id="commentform" class="comment-form">
					<p class="comment-notes"><span id="email-notes">Your email address will not be published.</span></p><p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8"  aria-required="true" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name</label> <input id="author" name="author" type="text" value="" size="30" /></p>
<p class="comment-form-email"><label for="email">Email</label> <input id="email" name="email" type="text" value="" size="30" aria-describedby="email-notes" /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='320' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="71d8823d01" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="31"/></p>				</form>
					</div><!-- #respond -->
		
	</div>
	<!-- .comments-area -->

				</main>
	<aside>
</aside>		<footer>
  <div class="container">
    <h1><a href="http://www.taniarascia.com/me">‚ô• Tania Rascia</a></h1>
  </div>
</footer>
<script type="text/javascript" src="http://www.taniarascia.com/wp-content/cache/minify/000000/M9RPzM4szk0t0Y_PzEvWT8svygUA.js"></script>
<script type='text/javascript'>
/* <![CDATA[ */
var PowerStatsParams = {"ajaxurl":"http:\/\/www.taniarascia.com\/wp-admin\/admin-ajax.php","ci":"YTo0OntzOjEyOiJjb250ZW50X3R5cGUiO3M6NDoicG9zdCI7czo4OiJjYXRlZ29yeSI7czoxMToiMywyLDYsMTEsMTAiO3M6MTA6ImNvbnRlbnRfaWQiO2k6MzIwO3M6NjoiYXV0aG9yIjtzOjg6ImhpLXRhbmlhIjt9.86ad7c7d88b9546b4b0fd5478300ca73"};
/* ]]> */
</script>
<script type="text/javascript" src="http://www.taniarascia.com/wp-content/cache/minify/000000/M9QvL9AtyC9PLdItLkksKUbj6hjo5yflJJak6mcV6xcUZRbn6piAlKTmJqWm6OVm5gEA.js"></script>
</body>

  </html>

<!-- Performance optimized by W3 Total Cache. Learn more: http://www.w3-edge.com/wordpress-plugins/

Minified using disk
Page Caching using disk: enhanced

 Served from: www.taniarascia.com @ 2016-01-26 23:09:40 by W3 Total Cache -->